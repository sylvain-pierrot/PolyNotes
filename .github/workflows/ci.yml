name: CI

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-push-images:
    name: Build and publish Frontend
    runs-on: ubuntu-latest
    steps:
      - id: commit
        uses: pr-mpt/actions-commit-hash@v2

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: frontend
          target: runner
          push: true
          tags: sylvainpierrot/polynotes-frontend:${{ steps.commit.outputs.short }}

      - name: install yq
        uses: mikefarah/yq@v4.15.1 

      - name: update infra yaml file
        run: |
          cd charts/polynotes-chart/templates
          yq e -i '.spec.template.spec.containers[0].image="sylvainpierrot/polynotes-frontend:${{ steps.commit.outputs.short }}"' polynotes-frontend.yaml

      - name: Push change
        uses: dmnemec/copy_file_to_another_repo_action@v1.1.1
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: charts/polynotes-chart/templates/polynotes-frontend.yaml
          destination_repo: sylvain-pierrot/PolyNotes
          destination_branch: main
          destination_folder: charts/polynotes-chart/templates
          user_email: sylvain.pierrot@etu.umontpellier
          user_name: sylvain-pierrot
          commit_message: update image tag version ${{ steps.commit.outputs.short }} in yml file


  # deploy-k8s:
  #   name: Deploy on cluster Polytech
  #   runs-on: ubuntu-latest
  #   needs: build-and-push-images
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Set up WireGuard
  #       uses: egor-tensin/setup-wireguard@v1.2.0
  #       with:
  #         endpoint: '${{ secrets.ENDPOINT }}'
  #         endpoint_public_key: '${{ secrets.ENDPOINT_PUBLIC }}'
  #         ips: '${{ secrets.IPS }}'
  #         allowed_ips: '${{ secrets.ALLOWED_IPS }}'
  #         private_key: '${{ secrets.PRIVATE }}'
  #         keepalive: '${{ secrets.KEEPALIVE }}'

  #     - name: Deploy
  #       uses: WyriHaximus/github-action-helm3@v2
  #       with:
  #         exec: helm install -n argocd --repo https://argoproj.github.io/argo-helm argo-cd argo-cd
  #         kubeconfig: '${{ secrets.KUBECONFIG }}'